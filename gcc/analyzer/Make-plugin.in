# Top level -*- makefile -*- fragment for analyzer
#   Copyright (C) 2013-2019 Free Software Foundation, Inc.

#This file is part of GCC.

#GCC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 3, or (at your option)
#any later version.

#GCC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# This file provides the plugin dependent support in the main Makefile.
# Each plugin makefile fragment must provide the following targets:
#
# foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.install-common, foo.install-man, foo.install-info, foo.install-pdf,
# foo.install-html, foo.info, foo.dvi, foo.pdf, foo.html, foo.uninstall,
# foo.mostlyclean, foo.clean, foo.distclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the plugin.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the plugin proper (eg: analyzer_plugin.so)
# - define the names for selecting the plugin in PLUGINS.

#
# Define the names for selecting analyzer in PLUGINS.
# Note that it would be nice to move the dependency on g++
# into the analyzer rule, but that needs a little bit of work
# to do the right thing within all.cross.

plugin_builddir = plugin

ANALYZER_PLUGIN_SO = $(plugin_builddir)/analyzer_plugin.so

analyzer: \
	$(FULL_DRIVER_NAME) \
	$(ANALYZER_PLUGIN_SO)

# Tell GNU make to ignore these if they exist.
.PHONY: analyzer

# Files that are linked into analyzer plugin

analyzer_OBJS = \
	analyzer/analysis-plan.o \
	analyzer/analyzer.o \
	analyzer/analyzer-logging.o \
	analyzer/analyzer-pass.o \
	analyzer/analyzer-plugin.o \
	analyzer/analyzer-selftests.o \
	analyzer/call-string.o \
	analyzer/checker-path.o \
	analyzer/constraint-manager.o \
	analyzer/diagnostic-manager.o \
	analyzer/digraph.o \
	analyzer/graphviz.o \
	analyzer/engine.o \
	analyzer/pending-diagnostic.o \
	analyzer/program-point.o \
	analyzer/program-state.o \
	analyzer/region-model.o \
	analyzer/sm.o \
	analyzer/sm-file.o \
	analyzer/sm-malloc.o \
	analyzer/sm-pattern-test.o \
	analyzer/sm-sensitive.o \
	analyzer/sm-signal.o \
	analyzer/sm-taint.o \
	analyzer/state-purge.o \
	analyzer/supergraph.o \
	analyzer/tristate.o \

# Use strict warnings for this plugin.
analyzer-warn = $(STRICT_WARN)

#
# Build hooks:

analyzer.all.cross:
analyzer.start.encap:
analyzer.rest.encap:

$(plugin_builddir):
	mkdir $@

$(ANALYZER_PLUGIN_SO): $(analyzer_OBJS) $(plugin_builddir)
	$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) \
	  -o $@ \
	  -shared \
	  $(analyzer_OBJS) \
	-lpthread

# If the analyzer is enabled, require the selftests to be run for it
# at each stage of the build:
selftest-analyzer: s-selftest-analyzer

ANALYZER_SELFTEST_FLAGS = -xc $(SELFTEST_FLAGS) -fanalyzer
ANALYZER_SELFTEST_DEPS = cc1$(exeext) $(SELFTEST_DEPS) $(ANALYZER_PLUGIN_SO)

# Run the analyzer selftests:
s-selftest-analyzer: $(ANALYZER_SELFTEST_DEPS)
	$(GCC_FOR_TARGET) $(ANALYZER_SELFTEST_FLAGS)
	$(STAMP) $@

# Convenience methods for running analyzer selftests under gdb:
.PHONY: selftest-analyzer-gdb
selftest-analyzer-gdb: $(ANALYZER_SELFTEST_DEPS)
	$(GCC_FOR_TARGET) $(ANALYZER_SELFTEST_FLAGS) \
	  -wrapper gdb,--args

# Convenience methods for running analyzer selftests under valgrind:
.PHONY: selftest-analyzer-valgrind
selftest-analyzer-valgrind: $(ANALYZER_SELFTEST_DEPS)
	$(GCC_FOR_TARGET) $(ANALYZER_SELFTEST_FLAGS) \
	  -wrapper valgrind,--leak-check=full

# Documentation build hooks.
analyzer.info:
analyzer.dvi:
analyzer.pdf:
analyzer.html:
analyzer.srcinfo:
analyzer.man:
analyzer.srcman:

# Testing hooks:
lang_checks += check-analyzer

#
# Install hooks:
analyzer.install-common:
analyzer.install-man:
analyzer.install-info:
analyzer.install-pdf:
analyzer.install-html:

analyzer.install-plugin: installdirs
	$(INSTALL_DATA) $(ANALYZER_PLUGIN_SO) $(DESTDIR)/$(plugin_resourcesdir)/analyzer_plugin.so

analyzer.uninstall:

#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

analyzer.mostlyclean:

analyzer.clean:

analyzer.distclean:

analyzer.maintainer-clean:

#
# Stage hooks:
# The main makefile has already created stage?/analyzer.

analyzer.stage1: stage1-start
	-mv analyzer/*$(objext) stage1/analyzer
analyzer.stage2: stage2-start
	-mv analyzer/*$(objext) stage2/analyzer
analyzer.stage3: stage3-start
	-mv analyzer/*$(objext) stage3/analyzer
analyzer.stage4: stage4-start
	-mv analyzer/*$(objext) stage4/analyzer
analyzer.stageprofile: stageprofile-start
	-mv analyzer/*$(objext) stageprofile/analyzer
analyzer.stagefeedback: stagefeedback-start
	-mv analyzer/*$(objext) stagefeedback/analyzer
